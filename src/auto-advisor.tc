let sub_array = \ 
    dst   : &Char 
    src   : &Char
    start :  Int
    len   :  Int
=>{
    let @i = 0;
    while(i<len)
    {
        dst[i] = src[start+i];
        i = i + 1;
    }
    dst[len]='\0';
    return ;
};

let parse_course = \ 
    info   : &Char 
    buffer : &Char
    course : &Int
    order  : &Int
    time   :  Int
=>{
    let @istart = 0;
    let @iend   = 0;
    let @idx    = 0;
    let @bstart = 0;
    let @bend   = 0;

    
    while(info[iend]!='|')
        iend = iend + 1;

    sub_array(buffer, info, istart, iend-istart-1);

    let course_id = sgeti(buffer);

    course[course_id*200+idx] = 1;
    idx = idx + 1;
    course[course_id*200+idx] = 7777;
    idx = idx + 1;
    iend = iend + 1;
    istart = iend;
    

    {
    while(info[iend]!='|')
        iend = iend + 1;

    sub_array(buffer, info, istart, iend-istart-1);

    let credit = sgeti(buffer);
    course[course_id*200+idx] = credit;
    idx = idx + 1;
    course[course_id*200+idx] = 7777;
    idx = idx + 1;
    iend = iend + 1;
    istart = iend;
    }

    {
    let cc = '\0' ** 3;
    while(info[iend]!='|')
        iend = iend + 1;
    sub_array(buffer, info, istart, iend-istart);

    let @i = 0;
    while(i<iend-istart)
    {
        if(buffer[i]==','||buffer[i]==';')
        {
            sub_array(cc, buffer, bstart+1, bend-bstart-1);

            let rely_course_id = sgeti(cc);
            course[course_id*200+idx] = rely_course_id;
            idx = idx + 1;
            if(buffer[i]==';')
            {
                course[course_id*200+idx] = 9999;
                idx = idx + 1;
            }
            bstart = bend + 1;
        }
        bend = bend + 1;
        i = i + 1;
    }
    if(iend-istart>0)
    {
        sub_array(cc, buffer, bstart+1, bend-bstart-1);
        let rely_course_id = sgeti(cc);
        course[course_id*200+idx] = rely_course_id;
        idx = idx + 1;
    }
    course[course_id*200+idx] = 7777;
    idx  = idx + 1;
    iend = iend + 1;
    istart = iend;
    }

    {
    while(info[iend]!='\0')
        iend = iend + 1;
    sub_array(buffer, info, istart, iend-istart);

    if(iend - istart == 0){
        course[course_id*200+idx] = -1;
        idx = idx + 1;
    } else if (buffer[0] == 'A') {
        course[course_id*200+idx] = 4;
        idx = idx + 1;
    } else if (buffer[0] == 'B') {
        course[course_id*200+idx] = 3;
        idx = idx + 1;
    } else if (buffer[0] == 'C') {
        course[course_id*200+idx] = 2;
        idx = idx + 1;
    } else if (buffer[0] == 'D') {
        course[course_id*200+idx] = 1;
        idx = idx + 1;
    } else if (buffer[0] == 'F') {
        course[course_id*200+idx] = 0;
        idx = idx + 1;
    } 

    }

    course[course_id*200+199] = idx - 1;
    order[time] = course_id;

    return;
};

let is_recommend = \
    course : &Int
    idx    :  Int
=>{
    let gpa_idx = course[idx*200+199];
    let score = course[idx*200+gpa_idx];
    if(score>0)
        return false;
    
    let start = 4;
    let end = gpa_idx - 1;
    if(end==start)
        return true;
    
    let @ret = false;
    let @item = true;
    let @j = start;
    
    while(j<end)
    {
        if(course[idx*200+j]==9999)
        {
            ret = ret || item;
            item = true;
        }
        else
        {
            let cidx = course[idx*200+j];
            let gpa_idx = course[cidx*200+199];
            let score = course[cidx*200+gpa_idx];
            if(score <= 0)
                item = false;
        }
        j = j + 1;
    }
    ret = ret || item;
    return ret;
};
let putln = \ => { puts("\n"); return; };
let cal = \
    course : &Int
    order  : &Int
=>{
    let @scores        = 0;
    let @score         = 0;
    let @try_credit    = 0;
    let @get_credit    = 0;
    let @remain_credit = 0;
    let @total_credit  = 0;

    let @i = 0;
    while(i<100)
    {
        if(course[i*200]==0) continue;
        let credit = course[i*200+2];
        total_credit += credit;
        let gpa_idx = course[i*200+199];
        if(gpa_idx!=6666)
            score = course[i*200+gpa_idx];
        else 
            score = 0;

        if(score>=0)
        {
            try_credit = try_credit + credit;
            scores     = scores     + credit * score;

            if(score>0)
            get_credit = get_credit +  credit;
        }
        i = i + 1;
    }

    let @gpa = 0.0;
    if(try_credit!=0)
        gpa = i2f(scores) / i2f(try_credit);

    remain_credit = total_credit - get_credit;

    puts("GPA: "); put1f(gpa); putln();
    puts("Hours Attempted: "); puti(try_credit); putln();
    puts("Hours Completed: "); puti(get_credit); putln();
    puts("Credits Remaining: "); puti(remain_credit); putln();

    putln();

    puts("Possible Courses to Take Next\n");
    let @i = 0;
    while(order[i] != 6666)
    {
        if(is_recommend(course, order[i]))
        {
            puts("  c");
            puti(order[i]);
            putln();
        }
        i = i + 1;
    }

    if(remain_credit == 0)
        puts("  None - Congratulations!\n");

    return gpa;
};

let main = \ =>{
    let course = 0 ** 40000;
    let order  = 0 ** 200;
    let buffer = '\0' ** 1000;
    let info   = '\0' ** 2000;
    
    let @i = 0;
    while(i<200)
    {
        course[i*200] = 0;
        order[i] = 6666;
        let @j = 1;
        while(j<200)
        {
            course[i*200+j] = 6666;
            j = j + 1;
        }
        i = i + 1;
    }

    let @time  = 0;
    while(true)
    {
        gets(info);
        if(info[0]=='\0')
            break;
        else
            parse_course(info, buffer, course, order, time);
        time = time + 1;
    }
    
    cal(course, order);
    return;
};

main();
